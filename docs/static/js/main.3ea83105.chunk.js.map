{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OAAOC,MAAOT,EAAYU,SAhBjB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAc,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAElC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCLHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,0FAC4EO,UAAUF,GADtF,uBAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATvB,kBAaZY,GAbY,4CAAH,sDC8BLK,EA3BC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEf,ECDwB,SAACA,GAEzB,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WAENjB,EAAQC,GACHiB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLT,KAAMY,EACNL,SAAS,MAEd,UAGZ,CAACb,IAEGc,EDpB0BM,CAAapB,GAAjCU,EAAb,EAAQJ,KAAaO,EAArB,EAAqBA,QAErB,OACI,qCACI,6BAAKb,IACJa,GAAW,2CACZ,qBAAKjB,UAAU,8CAAf,SAIQc,EAAOF,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEc/B4B,EA3BM,SAAAC,GAEjB,MAAoC3C,mBAAS,CAAC,UAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ6C,EAAWf,KAAI,SAAAR,GAAQ,OAAK,cAAC,EAAD,CACxBA,SAAUA,GACLA,Y,MCb7BwB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3ea83105.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n    \n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 0){\n            setCategories(cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\" value={inputValue} onChange={handleInputChange}></input>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","\n\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=is7CKuKFzj7J2mDrbvLurP20fZpgH9OP&q=${encodeURI(category)}t&limit=10`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p>Loading...</p>}\n            <div className='card-grid animate__animated animate__fadeIn'>\n\n\n                {\n                    images.map((img) => (\n                        <GifGridItem key={img.id} {...img}></GifGridItem>\n                    ))\n                }\n\n            </div>\n\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n                setTimeout(() => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n                }, 3000);\n            })\n\n    }, [category])\n\n    return state; //data:[], loading:true\n\n}\n\n\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { AddCategory } from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = props => {\n\n    const [categories, setCategories] = useState(['Drift']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}></AddCategory>\n            <hr></hr>\n            <ol>\n                {\n                    categories.map(category => (<GifGrid\n                        category={category}\n                        key={category}>\n\n                    </GifGrid>))\n                }\n            </ol>\n\n        </>\n    )\n}\n\nGifExpertApp.propTypes = {\n\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}